// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NodeIdProto;
class NodeIdProtoDefaultTypeInternal;
extern NodeIdProtoDefaultTypeInternal _NodeIdProto_default_instance_;
class PeerInfoProto;
class PeerInfoProtoDefaultTypeInternal;
extern PeerInfoProtoDefaultTypeInternal _PeerInfoProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
template<> ::NodeIdProto* Arena::CreateMaybeMessage<::NodeIdProto>(Arena*);
template<> ::PeerInfoProto* Arena::CreateMaybeMessage<::PeerInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageType : int {
  Find_node_query = 0,
  Find_value_query = 1,
  Store_query = 2,
  Ping_query = 3,
  Find_node_reply = 4,
  Find_value_reply = 5,
  Store_reply = 6,
  Ping_reply = 7,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = Find_node_query;
constexpr MessageType MessageType_MAX = Ping_reply;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class NodeIdProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeIdProto) */ {
 public:
  inline NodeIdProto() : NodeIdProto(nullptr) {};
  virtual ~NodeIdProto();

  NodeIdProto(const NodeIdProto& from);
  NodeIdProto(NodeIdProto&& from) noexcept
    : NodeIdProto() {
    *this = ::std::move(from);
  }

  inline NodeIdProto& operator=(const NodeIdProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeIdProto& operator=(NodeIdProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeIdProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeIdProto* internal_default_instance() {
    return reinterpret_cast<const NodeIdProto*>(
               &_NodeIdProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeIdProto& a, NodeIdProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeIdProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeIdProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeIdProto* New() const final {
    return CreateMaybeMessage<NodeIdProto>(nullptr);
  }

  NodeIdProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeIdProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeIdProto& from);
  void MergeFrom(const NodeIdProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeIdProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeIdProto";
  }
  protected:
  explicit NodeIdProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // fixed64 high = 1;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 low = 2;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NodeIdProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PeerInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PeerInfoProto) */ {
 public:
  inline PeerInfoProto() : PeerInfoProto(nullptr) {};
  virtual ~PeerInfoProto();

  PeerInfoProto(const PeerInfoProto& from);
  PeerInfoProto(PeerInfoProto&& from) noexcept
    : PeerInfoProto() {
    *this = ::std::move(from);
  }

  inline PeerInfoProto& operator=(const PeerInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerInfoProto& operator=(PeerInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfoProto* internal_default_instance() {
    return reinterpret_cast<const PeerInfoProto*>(
               &_PeerInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PeerInfoProto& a, PeerInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerInfoProto* New() const final {
    return CreateMaybeMessage<PeerInfoProto>(nullptr);
  }

  PeerInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerInfoProto& from);
  void MergeFrom(const PeerInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PeerInfoProto";
  }
  protected:
  explicit PeerInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kKeyFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // bytes addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const void* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_addr(
      std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // .NodeIdProto key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::NodeIdProto& key() const;
  ::NodeIdProto* release_key();
  ::NodeIdProto* mutable_key();
  void set_allocated_key(::NodeIdProto* key);
  private:
  const ::NodeIdProto& _internal_key() const;
  ::NodeIdProto* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::NodeIdProto* key);
  ::NodeIdProto* unsafe_arena_release_key();

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PeerInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::NodeIdProto* key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 7,
    kFromUserFieldNumber = 2,
    kToUserFieldNumber = 3,
    kFindUserFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kNonceFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // repeated .PeerInfoProto result = 7;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::PeerInfoProto* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfoProto >*
      mutable_result();
  private:
  const ::PeerInfoProto& _internal_result(int index) const;
  ::PeerInfoProto* _internal_add_result();
  public:
  const ::PeerInfoProto& result(int index) const;
  ::PeerInfoProto* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfoProto >&
      result() const;

  // .PeerInfoProto from_user = 2;
  bool has_from_user() const;
  private:
  bool _internal_has_from_user() const;
  public:
  void clear_from_user();
  const ::PeerInfoProto& from_user() const;
  ::PeerInfoProto* release_from_user();
  ::PeerInfoProto* mutable_from_user();
  void set_allocated_from_user(::PeerInfoProto* from_user);
  private:
  const ::PeerInfoProto& _internal_from_user() const;
  ::PeerInfoProto* _internal_mutable_from_user();
  public:
  void unsafe_arena_set_allocated_from_user(
      ::PeerInfoProto* from_user);
  ::PeerInfoProto* unsafe_arena_release_from_user();

  // .PeerInfoProto to_user = 3;
  bool has_to_user() const;
  private:
  bool _internal_has_to_user() const;
  public:
  void clear_to_user();
  const ::PeerInfoProto& to_user() const;
  ::PeerInfoProto* release_to_user();
  ::PeerInfoProto* mutable_to_user();
  void set_allocated_to_user(::PeerInfoProto* to_user);
  private:
  const ::PeerInfoProto& _internal_to_user() const;
  ::PeerInfoProto* _internal_mutable_to_user();
  public:
  void unsafe_arena_set_allocated_to_user(
      ::PeerInfoProto* to_user);
  ::PeerInfoProto* unsafe_arena_release_to_user();

  // .NodeIdProto find_user = 4;
  bool has_find_user() const;
  private:
  bool _internal_has_find_user() const;
  public:
  void clear_find_user();
  const ::NodeIdProto& find_user() const;
  ::NodeIdProto* release_find_user();
  ::NodeIdProto* mutable_find_user();
  void set_allocated_find_user(::NodeIdProto* find_user);
  private:
  const ::NodeIdProto& _internal_find_user() const;
  ::NodeIdProto* _internal_mutable_find_user();
  public:
  void unsafe_arena_set_allocated_find_user(
      ::NodeIdProto* find_user);
  ::NodeIdProto* unsafe_arena_release_find_user();

  // int64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 nonce = 6;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .MessageType type = 1;
  void clear_type();
  ::MessageType type() const;
  void set_type(::MessageType value);
  private:
  ::MessageType _internal_type() const;
  void _internal_set_type(::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfoProto > result_;
  ::PeerInfoProto* from_user_;
  ::PeerInfoProto* to_user_;
  ::NodeIdProto* find_user_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeIdProto

// fixed64 high = 1;
inline void NodeIdProto::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeIdProto::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeIdProto::high() const {
  // @@protoc_insertion_point(field_get:NodeIdProto.high)
  return _internal_high();
}
inline void NodeIdProto::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void NodeIdProto::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:NodeIdProto.high)
}

// fixed64 low = 2;
inline void NodeIdProto::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeIdProto::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeIdProto::low() const {
  // @@protoc_insertion_point(field_get:NodeIdProto.low)
  return _internal_low();
}
inline void NodeIdProto::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void NodeIdProto::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:NodeIdProto.low)
}

// -------------------------------------------------------------------

// PeerInfoProto

// .NodeIdProto key = 1;
inline bool PeerInfoProto::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool PeerInfoProto::has_key() const {
  return _internal_has_key();
}
inline void PeerInfoProto::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::NodeIdProto& PeerInfoProto::_internal_key() const {
  const ::NodeIdProto* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeIdProto*>(
      &::_NodeIdProto_default_instance_);
}
inline const ::NodeIdProto& PeerInfoProto::key() const {
  // @@protoc_insertion_point(field_get:PeerInfoProto.key)
  return _internal_key();
}
inline void PeerInfoProto::unsafe_arena_set_allocated_key(
    ::NodeIdProto* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerInfoProto.key)
}
inline ::NodeIdProto* PeerInfoProto::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeIdProto* PeerInfoProto::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:PeerInfoProto.key)
  
  ::NodeIdProto* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::NodeIdProto* PeerInfoProto::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeIdProto>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::NodeIdProto* PeerInfoProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PeerInfoProto.key)
  return _internal_mutable_key();
}
inline void PeerInfoProto::set_allocated_key(::NodeIdProto* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:PeerInfoProto.key)
}

// bytes addr = 2;
inline void PeerInfoProto::clear_addr() {
  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PeerInfoProto::addr() const {
  // @@protoc_insertion_point(field_get:PeerInfoProto.addr)
  return _internal_addr();
}
inline void PeerInfoProto::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:PeerInfoProto.addr)
}
inline std::string* PeerInfoProto::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:PeerInfoProto.addr)
  return _internal_mutable_addr();
}
inline const std::string& PeerInfoProto::_internal_addr() const {
  return addr_.Get();
}
inline void PeerInfoProto::_internal_set_addr(const std::string& value) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PeerInfoProto::set_addr(std::string&& value) {
  
  addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PeerInfoProto.addr)
}
inline void PeerInfoProto::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PeerInfoProto.addr)
}
inline void PeerInfoProto::set_addr(const void* value,
    size_t size) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PeerInfoProto.addr)
}
inline std::string* PeerInfoProto::_internal_mutable_addr() {
  
  return addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PeerInfoProto::release_addr() {
  // @@protoc_insertion_point(field_release:PeerInfoProto.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeerInfoProto::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PeerInfoProto.addr)
}
inline std::string* PeerInfoProto::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PeerInfoProto.addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PeerInfoProto::unsafe_arena_set_allocated_addr(
    std::string* addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerInfoProto.addr)
}

// uint32 port = 3;
inline void PeerInfoProto::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerInfoProto::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerInfoProto::port() const {
  // @@protoc_insertion_point(field_get:PeerInfoProto.port)
  return _internal_port();
}
inline void PeerInfoProto::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void PeerInfoProto::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:PeerInfoProto.port)
}

// -------------------------------------------------------------------

// Message

// .MessageType type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::MessageType Message::_internal_type() const {
  return static_cast< ::MessageType >(type_);
}
inline ::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::MessageType value) {
  
  type_ = value;
}
inline void Message::set_type(::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Message.type)
}

// .PeerInfoProto from_user = 2;
inline bool Message::_internal_has_from_user() const {
  return this != internal_default_instance() && from_user_ != nullptr;
}
inline bool Message::has_from_user() const {
  return _internal_has_from_user();
}
inline void Message::clear_from_user() {
  if (GetArena() == nullptr && from_user_ != nullptr) {
    delete from_user_;
  }
  from_user_ = nullptr;
}
inline const ::PeerInfoProto& Message::_internal_from_user() const {
  const ::PeerInfoProto* p = from_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PeerInfoProto*>(
      &::_PeerInfoProto_default_instance_);
}
inline const ::PeerInfoProto& Message::from_user() const {
  // @@protoc_insertion_point(field_get:Message.from_user)
  return _internal_from_user();
}
inline void Message::unsafe_arena_set_allocated_from_user(
    ::PeerInfoProto* from_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_user_);
  }
  from_user_ = from_user;
  if (from_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.from_user)
}
inline ::PeerInfoProto* Message::release_from_user() {
  auto temp = unsafe_arena_release_from_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PeerInfoProto* Message::unsafe_arena_release_from_user() {
  // @@protoc_insertion_point(field_release:Message.from_user)
  
  ::PeerInfoProto* temp = from_user_;
  from_user_ = nullptr;
  return temp;
}
inline ::PeerInfoProto* Message::_internal_mutable_from_user() {
  
  if (from_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerInfoProto>(GetArena());
    from_user_ = p;
  }
  return from_user_;
}
inline ::PeerInfoProto* Message::mutable_from_user() {
  // @@protoc_insertion_point(field_mutable:Message.from_user)
  return _internal_mutable_from_user();
}
inline void Message::set_allocated_from_user(::PeerInfoProto* from_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete from_user_;
  }
  if (from_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(from_user);
    if (message_arena != submessage_arena) {
      from_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_user, submessage_arena);
    }
    
  } else {
    
  }
  from_user_ = from_user;
  // @@protoc_insertion_point(field_set_allocated:Message.from_user)
}

// .PeerInfoProto to_user = 3;
inline bool Message::_internal_has_to_user() const {
  return this != internal_default_instance() && to_user_ != nullptr;
}
inline bool Message::has_to_user() const {
  return _internal_has_to_user();
}
inline void Message::clear_to_user() {
  if (GetArena() == nullptr && to_user_ != nullptr) {
    delete to_user_;
  }
  to_user_ = nullptr;
}
inline const ::PeerInfoProto& Message::_internal_to_user() const {
  const ::PeerInfoProto* p = to_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PeerInfoProto*>(
      &::_PeerInfoProto_default_instance_);
}
inline const ::PeerInfoProto& Message::to_user() const {
  // @@protoc_insertion_point(field_get:Message.to_user)
  return _internal_to_user();
}
inline void Message::unsafe_arena_set_allocated_to_user(
    ::PeerInfoProto* to_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_user_);
  }
  to_user_ = to_user;
  if (to_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.to_user)
}
inline ::PeerInfoProto* Message::release_to_user() {
  auto temp = unsafe_arena_release_to_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PeerInfoProto* Message::unsafe_arena_release_to_user() {
  // @@protoc_insertion_point(field_release:Message.to_user)
  
  ::PeerInfoProto* temp = to_user_;
  to_user_ = nullptr;
  return temp;
}
inline ::PeerInfoProto* Message::_internal_mutable_to_user() {
  
  if (to_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerInfoProto>(GetArena());
    to_user_ = p;
  }
  return to_user_;
}
inline ::PeerInfoProto* Message::mutable_to_user() {
  // @@protoc_insertion_point(field_mutable:Message.to_user)
  return _internal_mutable_to_user();
}
inline void Message::set_allocated_to_user(::PeerInfoProto* to_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_user_;
  }
  if (to_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to_user);
    if (message_arena != submessage_arena) {
      to_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_user, submessage_arena);
    }
    
  } else {
    
  }
  to_user_ = to_user;
  // @@protoc_insertion_point(field_set_allocated:Message.to_user)
}

// .NodeIdProto find_user = 4;
inline bool Message::_internal_has_find_user() const {
  return this != internal_default_instance() && find_user_ != nullptr;
}
inline bool Message::has_find_user() const {
  return _internal_has_find_user();
}
inline void Message::clear_find_user() {
  if (GetArena() == nullptr && find_user_ != nullptr) {
    delete find_user_;
  }
  find_user_ = nullptr;
}
inline const ::NodeIdProto& Message::_internal_find_user() const {
  const ::NodeIdProto* p = find_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeIdProto*>(
      &::_NodeIdProto_default_instance_);
}
inline const ::NodeIdProto& Message::find_user() const {
  // @@protoc_insertion_point(field_get:Message.find_user)
  return _internal_find_user();
}
inline void Message::unsafe_arena_set_allocated_find_user(
    ::NodeIdProto* find_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(find_user_);
  }
  find_user_ = find_user;
  if (find_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.find_user)
}
inline ::NodeIdProto* Message::release_find_user() {
  auto temp = unsafe_arena_release_find_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeIdProto* Message::unsafe_arena_release_find_user() {
  // @@protoc_insertion_point(field_release:Message.find_user)
  
  ::NodeIdProto* temp = find_user_;
  find_user_ = nullptr;
  return temp;
}
inline ::NodeIdProto* Message::_internal_mutable_find_user() {
  
  if (find_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeIdProto>(GetArena());
    find_user_ = p;
  }
  return find_user_;
}
inline ::NodeIdProto* Message::mutable_find_user() {
  // @@protoc_insertion_point(field_mutable:Message.find_user)
  return _internal_mutable_find_user();
}
inline void Message::set_allocated_find_user(::NodeIdProto* find_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete find_user_;
  }
  if (find_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(find_user);
    if (message_arena != submessage_arena) {
      find_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, find_user, submessage_arena);
    }
    
  } else {
    
  }
  find_user_ = find_user;
  // @@protoc_insertion_point(field_set_allocated:Message.find_user)
}

// int64 timestamp = 5;
inline void Message::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::timestamp() const {
  // @@protoc_insertion_point(field_get:Message.timestamp)
  return _internal_timestamp();
}
inline void Message::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Message::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Message.timestamp)
}

// uint64 nonce = 6;
inline void Message::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::nonce() const {
  // @@protoc_insertion_point(field_get:Message.nonce)
  return _internal_nonce();
}
inline void Message::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void Message::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:Message.nonce)
}

// repeated .PeerInfoProto result = 7;
inline int Message::_internal_result_size() const {
  return result_.size();
}
inline int Message::result_size() const {
  return _internal_result_size();
}
inline void Message::clear_result() {
  result_.Clear();
}
inline ::PeerInfoProto* Message::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:Message.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfoProto >*
Message::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:Message.result)
  return &result_;
}
inline const ::PeerInfoProto& Message::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::PeerInfoProto& Message::result(int index) const {
  // @@protoc_insertion_point(field_get:Message.result)
  return _internal_result(index);
}
inline ::PeerInfoProto* Message::_internal_add_result() {
  return result_.Add();
}
inline ::PeerInfoProto* Message::add_result() {
  // @@protoc_insertion_point(field_add:Message.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfoProto >&
Message::result() const {
  // @@protoc_insertion_point(field_list:Message.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
